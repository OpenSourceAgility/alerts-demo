<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:integration="http://www.springframework.org/schema/integration"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:file="http://www.springframework.org/schema/integration/file"
	xmlns:stream="http://www.springframework.org/schema/integration/stream"
	xmlns:int-jdbc="http://www.springframework.org/schema/integration/jdbc"
	xmlns:jms="http://www.springframework.org/schema/integration/jms"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
			http://www.springframework.org/schema/integration/jdbc 
			http://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc.xsd
			http://www.springframework.org/schema/integration/file
			http://www.springframework.org/schema/integration/file/spring-integration-file.xsd
			http://www.springframework.org/schema/integration/jms
			http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/integration/stream
			http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd
			http://www.springframework.org/schema/oxm
			http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd
			http://www.springframework.org/schema/integration
			http://www.springframework.org/schema/integration/spring-integration.xsd">

	<context:component-scan
		base-package="com.opensourceagility.springintegration.alerts.nonurgent" />

	<!-- Create a channel to receive our batches of non-urgent alerts from the 
		database -->
	<integration:channel id="batchNonUrgentAlertChannel" />

	<!-- Create a channel to receive individual non-urgent alerts -->
	<integration:channel id="nonUrgentAlertChannel" />

	<!-- Create a channel to receive individual non-urgent alerts which have 
		an 'fileName' header value set -->
	<integration:channel id="nonUrgentAlertFilenameEnrichedChannel" />

	<!-- Create a channel to receive individual non-urgent alerts which have 
		an 'fileName' header value set and which have been converted into CSV format -->
	<integration:channel
		id="nonUrgentAlertFilenameEnrichedTransformedTextChannel" />

	<!-- Create a channel to receive CSV files that are polled from the filesystem -->
	<integration:channel id="directoryPollingFileChannel" />

	<!-- Create a channel to receive CSV files that are polled from the filesystem 
		which have been enriched with headers for 'fromTimestamp' and 'toTimestamp' 
		for the file -->
	<integration:channel id="discoveredTimeRangeHeaderEnrichedChannel" />


	<!-- 1. Setup database polling for non-urgent alerts, sending the batches 
		of alerts to 'batchNonUrgentAlertChannel' -->
	<int-jdbc:inbound-channel-adapter
		row-mapper="alertRowMapper"
		query="select * from Alert where processed != 1 and urgency &lt;= 50 order by persist_date for update"
		channel="batchNonUrgentAlertChannel" data-source="dataSource"
		update="update Alert set processed=1 where id in (:id)">
		<integration:poller max-messages-per-poll="${database.nonurgent.maxmessagesperpoll}"
			default="true" fixed-delay="${database.nonurgent.poll.fixeddelay}">
			<integration:transactional propagation="REQUIRED"
				read-only="false" transaction-manager="transactionManager" />
		</integration:poller>
	</int-jdbc:inbound-channel-adapter>

	<!-- 2. Split the batches of alerts into individual alert messages, sending 
		the individual alerts to 'nonUrgentAlertChannel' -->
	<integration:splitter input-channel="batchNonUrgentAlertChannel"
		output-channel="nonUrgentAlertChannel">
		<bean
			class="org.springframework.integration.splitter.DefaultMessageSplitter" />
	</integration:splitter>

	<!-- 3. Enrich each alert message sent to 'nonUrgentAlertChannel' with the 
		hourId as a header, sending the enriched alerts to 'nonUrgentAlertHourIdEnrichedChannel' -->
	<integration:header-enricher input-channel="nonUrgentAlertChannel"
		output-channel="nonUrgentAlertFilenameEnrichedChannel">
		<integration:header name="fileName" method="getFilename"
			ref="alertFilenameHeaderEnricher" />
	</integration:header-enricher>


	<!-- 4. Transform each alert message sent into a CSV string, sending the 
		transformed messages to 'nonUrgentAlertAsHourIdEnrichedTransformedTextChannel' -->
	<integration:transformer id="alertTextTransformer"
		ref="alertTextTransformerBean" input-channel="nonUrgentAlertFilenameEnrichedChannel"
		method="transform" output-channel="nonUrgentAlertFilenameEnrichedTransformedTextChannel" />


	<!-- 5. Write each CSV message received on 'nonUrgentAlertAsHourIdEnrichedTransformedTextChannel' 
		to a file, using the hourId header to determine filename -->
	<file:outbound-channel-adapter mode="APPEND"
		channel="nonUrgentAlertFilenameEnrichedTransformedTextChannel"
		directory="${csv.file.directory}" filename-generator-expression="headers[fileName]" />

	<!-- 6. Poll the filesystem for csv files and send discovered files to 'directoryPollingFileChannel' -->
	<file:inbound-channel-adapter directory="file:${csv.file.directory}"
		prevent-duplicates="false" channel="directoryPollingFileChannel">
		<integration:poller default="true" fixed-rate="20000" />
	</file:inbound-channel-adapter>

	<!-- 7. Enrich each file message received on 'directoryPollingFileChannel' 
		with headers specifying 'fromTimestamp' and 'toTimestamp' of the discovered 
		file -->
	<!-- Send each enriched file message to 'discoveredTimeRangeHeaderEnrichedChannel' -->

	<integration:header-enricher input-channel="directoryPollingFileChannel"
		output-channel="discoveredTimeRangeHeaderEnrichedChannel">
		<integration:header name="fromTimestamp" method="getFromTimestamp"
			ref="fileTimeRangeHeaderEnricher" />
		<integration:header name="toTimestamp" method="getToTimestamp"
			ref="fileTimeRangeHeaderEnricher" />
	</integration:header-enricher>
	
	

	<!-- 8 Filter files received on 'discoveredTimeRangeHeaderEnrichedChannel', 
		passing only those files which have been 'completed' to 'completedFileChannel' -->
	<!-- By completed, we mean that there are no more unprocessed alerts in 
		the database for the timerange of the file, and the timerange of the file 
		is in the past according to database timestamp -->
	<int-jdbc:outbound-gateway
		query="select :payload.path as filePath from (select count(*) as c from Alert 
    where urgency &lt;= 50 and persist_date >= :headers[fromTimestamp] and persist_date &lt; :headers[toTimestamp] and processed = 0) 
    as counts where :headers[toTimestamp] &lt; now() and c = 0"
		request-channel="discoveredTimeRangeHeaderEnrichedChannel"
		reply-channel="completedFileChannel" row-mapper="filePathToFileMapper"
		data-source="dataSource">
	</int-jdbc:outbound-gateway>
	

	<!-- Encriches an alert message with the 'hourId' for the alert, using the 
		database timestamp of the alert -->
	<bean id="alertFilenameHeaderEnricher"
		class="com.opensourceagility.springintegration.alerts.nonurgent.AlertFilenameHeaderEnricher">
		<property name="filenameTimeStampFormat" value="${csv.timestamped.filename.format}" />
	</bean>

	

	<!-- 9. Send file paths received on 'completedFilePathChannel' to the Amazon S3 
		file uploader -->
	<integration:service-activator
		input-channel="completedFileChannel" ref="amazonS3FileUploader" />



	<!-- Produces a line of CSV text for an Alert -->
	<bean id="lineAggregator"
		class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
		<property name="delimiter" value="," />
		<property name="fieldExtractor">
			<bean
				class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
				<property name="names" value="id, persistDate,urgency,messageCode" />
			</bean>
		</property>
	</bean>

	<!-- Uses the lineAggregator to transform an Alert to CSV text -->
	<bean id="alertTextTransformerBean"
		class="com.opensourceagility.springintegration.alerts.nonurgent.AlertTextTransformer" />

	
	<!-- Enriches a file message with headers specifying the timerange of the 
		file -->
	<bean id="fileTimeRangeHeaderEnricher"
		class="com.opensourceagility.springintegration.alerts.nonurgent.FileTimeRangeHeaderEnricher">
		<property name="filenameTimeStampFormat" value="${csv.timestamped.filename.format}" />
		<property name="fileTimeRangeDurationSeconds" value="${csv.file.timerange.duration.seconds}" />

	</bean>
	

	<beans profile="default">

		<bean id="amazonS3FileUploader"
			class="com.opensourceagility.springintegration.alerts.nonurgent.AmazonS3FileUploader" >
			<property name="bucketName" value="${amazon.s3.bucketName}" />
		</bean>	

		<bean id="awsCredentials" class="com.amazonaws.auth.BasicAWSCredentials">
			<constructor-arg value="${amazon.aws.accesskey}" />
			<constructor-arg value="${amazon.aws.secretkey}" />
		</bean>

		<bean id="amazonS3Client" class="com.amazonaws.services.s3.AmazonS3Client">
			<constructor-arg ref="awsCredentials" />
		</bean>

	</beans>

</beans>
